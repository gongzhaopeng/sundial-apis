openapi: 3.0.0
info:
  version: 'genesis'
  title: 'Resource Service API'
  description: 'Assessment-Cloud:Resource-Service对应的API.'
  contact:
    email: gongguochuanqi@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: http://sundial.benbenedu.cn/resource/genesis
tags:
  - name: ResourceTag
    description: 访问资源标签.
  - name: Resource
    description: 访问资源.
paths:
  /rsrctags:
    post:
      tags: 
        - ResourceTag
      summary: 创建资源标签.
      description: 创建资源标签.
      operationId: createRsrcTag
      requestBody:
        description: 请求创建的资源标签信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RsrcTagCreatingReq'
      responses:
        '201':
          description: 成功创建资源标签.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RsrcTagCreatedResp'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateTitle:
                  value:
                    code: 'DuplicateTitle'
                    detail: '${detail}'
      security:
        - resourceRepoAuth: 
          - client:inner
  /rsrctags/query:
    post:
      tags: 
        - ResourceTag
      summary: Query资源标签.
      description: Query资源标签.
      operationId: queryRsrcTags
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageSortWithDefaultCreateTimeDesc'
      requestBody:
        description: 查询描述.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RsrcTagQuery'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RsrcTagPage'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
      security:
        - resourceRepoAuth: 
          - client:inner
  /rsrctags/{rsrctag-id}:
    get:
      tags: 
        - ResourceTag
      summary: 获取指定的资源标签详情.
      description: 获取指定的资源标签详情.
      operationId: getRsrcTagById
      parameters: 
        - name: rsrctag-id
          in: path
          description: 指定rsrctag的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RsrcTag'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的资源标签不存在.
      security:
        - resourceRepoAuth: 
          - client:inner
  /resources:
    post:
      tags: 
        - Resource
      summary: 创建资源.
      description: 创建资源. 新创建资源的初始状态为Developing.
      operationId: createResource
      requestBody:
        description: 请求创建的资源信息.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResourceCreatingReq'
      responses:
        '201':
          description: 成功创建资源.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceCreatedResp'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateTitle:
                  value:
                    code: 'DuplicateTitle'
                    detail: '${detail}'
      security:
        - resourceRepoAuth: 
          - client:inner
  /resources/query:
    post:
      tags: 
        - Resource
      summary: Query资源.
      description: Query资源.
      operationId: queryResources
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageSortWithDefaultLUTimeDesc'
      requestBody:
        description: 查询描述.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuery'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePage'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
      security:
        - resourceRepoAuth: 
          - client:inner
  /resources/{resource-id}:
    get:
      tags: 
        - Resource
      summary: 获取指定的资源详情.
      description: 获取指定的资源详情.
      operationId: getResourceById
      parameters: 
        - name: resource-id
          in: path
          description: 指定资源的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的资源不存在.
      security:
        - resourceRepoAuth: 
          - client:inner
    patch:
      tags: 
        - Resource
      summary: 修改指定资源的信息.
      description: 修改指定资源的信息.
      operationId: patchResourceById
      parameters: 
        - name: resource-id
          in: path
          description: 指定资源的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      requestBody:
        description: 欲修改的信息.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResourcePatch'
      responses:
        '204':
          description: 修改成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的资源不存在.
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateTitle:
                  value:
                    code: 'DuplicateTitle'
                    detail: '${detail}'
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '更改仅在Developing状态下被允许.'
      security:
        - resourceRepoAuth: 
          - client:inner
  /resources/{resource-id}/contents/{content-number}:
    get:
      tags: 
        - Resource
      summary: 获取指定的资源内容.
      description: 获取指定的资源内容.
      operationId: getRsrcContentByIdAndNumber
      parameters: 
        - name: resource-id
          in: path
          description: 指定资源的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
        - name: content-number
          in: path
          description: 指定资源内容的编号.
          required: true
          schema:
            $ref: '#/components/schemas/NumberField'
      responses:
        '200':
          description: 获取成功.
          content:
            '*/*':
              schema:
                oneOf:
                  - type: string
                  - type: string
                    format: binary
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的资源内容不存在.
      security:
        - resourceRepoAuth: 
          - client:inner
  /resources/{resource-id}/contents/{content-number}/url:
    get:
      tags: 
        - Resource
      summary: 获取指定资源内容的实际访问地址.
      description: 获取指定资源内容的实际访问地址.
      operationId: getRsrcContentUrlByIdAndNumber
      parameters: 
        - name: resource-id
          in: path
          description: 指定资源的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
        - name: content-number
          in: path
          description: 指定资源内容的编号.
          required: true
          schema:
            $ref: '#/components/schemas/NumberField'
      responses:
        '200':
          description: 获取成功.
          content:
            text/plain:
              schema:
                type: string
                description: 资源内容的实际访问地址.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的资源内容不存在.
      security:
        - resourceRepoAuth: 
          - client:inner
  /resources/{resource-id}/state:
    put:
      tags: 
        - Resource
      summary: 更新指定资源的状态.
      description: 更新指定资源的状态.
      operationId: updateRsrcStateById
      parameters: 
        - name: resource-id
          in: path
          description: 指定资源的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      requestBody:
        description: 资源状态更新请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RsrcStateUpdatingReq'
      responses:
        '204':
          description: 资源状态更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的资源不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                specifiedStateConversionNotAllowed:
                  value:
                    code: 'SpecifiedStateConversionNotAllowed'
                    detail: '${detail}'
                  description: '允许的状态转换路径: Developing->Usable->Discarded'
      security:
        - resourceRepoAuth: 
          - client:inner
  /resources/{resource-id}/tags:
    put:
      tags: 
        - Resource
      summary: 更新指定资源的标签集.
      description: 更新指定资源的标签集.
      operationId: updateRsrcTagsById
      parameters: 
        - name: resource-id
          in: path
          description: 指定资源的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      requestBody:
        description: 资源标签集更新请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RsrcTagsUpdatingReq'
      responses:
        '204':
          description: 资源标签集更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的资源不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
      security:
        - resourceRepoAuth: 
          - client:inner
components:
  schemas:
    RsrcTagCreatingReq:
      type: object
      description: 创建资源标签的请求信息.
      properties:
        title:
          $ref: '#/components/schemas/RsrcTagTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
      required: 
        - title
    RsrcTagCreatedResp:
      type: object
      description: 资源标签创建成功时的响应.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
      required: 
        - id
    RsrcTagQuery:
      type: object
      description: 资源标签查询描述对象.
      properties:
        id: 
          $ref: '#/components/schemas/IdQueryField'
        createTime:
          $ref: '#/components/schemas/TimeQueryField'
        author:
          $ref: '#/components/schemas/IdQueryField'
        title:
          $ref: '#/components/schemas/TextSearchSpec'
        description:
          $ref: '#/components/schemas/TextSearchSpec'
    RsrcTagPage:
      description: 资源标签分页.
      allOf:
        - $ref: '#/components/schemas/BasicPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/RsrcTag'
    ResourceCreatingReq:
      type: object
      description: 创建资源的请求信息.
      properties:
        title:
          $ref: '#/components/schemas/ResourceTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
        mediaType:
          $ref: '#/components/schemas/MediaTypeField'
        content:
          $ref: '#/components/schemas/ResourceRawContent'
      required:
        - title
        - mediaType
        - content
    ResourceCreatedResp:
      type: object
      description: 资源创建成功时的响应.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
      required: 
        - id
    ResourceQuery:
      type: object
      description: 资源查询描述对象.
      properties:
        id: 
          $ref: '#/components/schemas/IdQueryField'
        createTime:
          $ref: '#/components/schemas/TimeQueryField'
        lUTime:
          $ref: '#/components/schemas/TimeQueryField'
        author:
          $ref: '#/components/schemas/IdQueryField'
        state:
          type: array
          items:
            $ref: '#/components/schemas/ResourceState'
          description: 指定state所属的集合. =relation=>in.
          minLength: 1
          maxLength: 10
        title:
          $ref: '#/components/schemas/TextSearchSpec'
        description:
          $ref: '#/components/schemas/TextSearchSpec'
        mediaType:
          type: array
          items:
            $ref: '#/components/schemas/MediaTypeField'
          description: 指定mediaType所属的集合. =relation=>in.
          minLength: 1
          maxLength: 50
        tags:
          $ref: '#/components/schemas/IdQueryField'
    IdQueryField:
      type: array
      items:
        $ref: '#/components/schemas/ObjectID'
      description: 指定id所属的集合. =relation=>in.
      minLength: 1
      maxLength: 50
    TimeQueryField:
      type: array
      items:
        type: integer
        format: int64
      description: 指定时间所属的区间序列. =relation=>in. 数组长度必须为偶数.
      minLength: 2
      maxLength: 20
    TextSearchSpec:
      type: object
      description: 文本搜索描述对象.
      properties:
        include:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 25
          description: =relation=>all.
          minLength: 1
          maxLength: 10
        exclude:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 25
          description: =relation=>all.
          minLength: 1
          maxLength: 10
    ResourcePage:
      description: 资源分页.
      allOf:
        - $ref: '#/components/schemas/BasicPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Resource'
    ResourcePatch:
      type: object
      description: 资源补丁.
      properties:
        rsrcLUTime:
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        title:
          $ref: '#/components/schemas/ResourceTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
        mediaType:
          $ref: '#/components/schemas/MediaTypeField'
        content:
          $ref: '#/components/schemas/ResourceRawContent'
    RsrcStateUpdatingReq:
      type: object
      description: 更新资源状态的请求信息.
      properties:
        rsrcLUTime:
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        newState:
          $ref: '#/components/schemas/ResourceState'
      required: 
        - rsrcLUTime
        - newState
    RsrcTagsUpdatingReq:
      type: object
      description: 更新资源标签集的请求信息.
      properties:
        rsrcLUTime:
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        newTags:
          type: array
          description: 新的标签集. 该数组长度为0时表示清除所有标签.
          items:
            $ref: '#/components/schemas/ObjectID'
          minLength: 0
          maxLength: 50
      required: 
        - rsrcLUTime
        - newTags
    RsrcTag:
      type: object
      description: 资源标签.用于资源管理.
      properties:
        id: 
          $ref: '#/components/schemas/ObjectID'
        createTime:
          type: integer
          format: int64
          description: 创建时间(timestamp).
        author:
          $ref: '#/components/schemas/AuthorBrief'
        title:
          $ref: '#/components/schemas/RsrcTagTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
      required: 
        - id
        - createTime
        - author
        - title
    ResourceRawContent:
      type: string
      format: binary
      description: 资源的原始内容.
      minLength: 1
      maxLength: 134217728
    Resource:
      type: object
      description: 资源.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        createTime:
          type: integer
          format: int64
          description: 创建时间(timestamp).
        lUTime:
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        author:
          $ref: '#/components/schemas/AuthorBrief'
        state:
          $ref: '#/components/schemas/ResourceState'
        title:
          $ref: '#/components/schemas/ResourceTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
        mediaType:
          $ref: '#/components/schemas/MediaTypeField'
        contents:
          type: array
          items:
            $ref: '#/components/schemas/ResourceContent'
          description: 编号为0的ResourceContent为原始资源内容. 该数组中各个ResourceContent间编号不能重复.
        tags:
          type: array
          description: 标签集.用于管理.
          items:
            $ref: '#/components/schemas/RsrcTagBrief'
      required:
        - id
        - createTime
        - lUTime
        - author
        - state
        - title
        - mediaType
        - contents
    ResourceTitle:
      type: string
      description: 资源标题.
      minLength: 1
      maxLength: 50
    ResourceContent:
      type: object
      description: 资源内容.
      properties:
        number:
          $ref: '#/components/schemas/NumberField'
        quality:
          $ref: '#/components/schemas/ResourceContentQuality'
        size:
          type: integer
          format: int32
          description: File size in bytes.
        duration:
          type: integer
          format: int32
          description: The duration.
        height:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
        storageRef:
          type: string
          description: The reference to the actual storage.
        url:
          type: string
          description: 资源内容的实际访问地址.
      required: 
        - number
        - size
    NumberField:
      type: integer
      format: int32
      description: 编号.编号越小,优先级越高.
      minimum: 0
    ResourceContentQuality:
      type: integer
      format: int32
      description: 质量等级.
      minimum: 1
      maximum: 10
    ResourceState:
      type: string
      description: 资源状态.
      enum: 
        - Developing
        - Usable
        - Discarded
      minLength: 1
      maxLength: 50
    AuthorBrief:
      type: object
      description: 作者的简单信息.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
        nickname:
          type: string
      required: 
        - id
    RsrcTagBrief:
      type: object
      description: 资源标签的简单形式.
      properties:
        id: 
          $ref: '#/components/schemas/ObjectID'
        title:
          $ref: '#/components/schemas/RsrcTagTitle'
      required: 
        - id
        - title
    RsrcTagTitle:
      type: string
      description: 不可重复.
      minLength: 1
      maxLength: 25
    MgmtDescriptionField:
      type: string
      description: 用于管理的描述信息.
      minLength: 1
      maxLength: 250
    MediaTypeField:
      type: string
      externalDocs: 
        description: wiki
        url: https://en.wikipedia.org/wiki/Media_type
      description: mime.types
      minLength: 1
      maxLength: 100
    ObjectID:
      type: string
      description: MongoDB:ObjectId
      minLength: 24
      maxLength: 24
    ErrorResponse:
      description: 错误响应.
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ErrorResponseCode'
        detail:
          type: string
          description: 错误详情.
      required:
        - code
    ErrorResponseCode:
      type: string
      description: 错误码.
      enum: 
        - Undefined
        - LUTimeConflict
        - AlteringNotAllowed
        - SpecifiedStateConversionNotAllowed
        - DuplicateTitle
    BasicPage:
      type: object
      description: 分页基本信息.
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
      required: 
        - totalPages
        - totalElements
    PageNumberSpec:
      type: integer
      format: int32
      minimum: 0
      default: 0
    PageSizeSpec:
      type: integer
      format: int32
      minimum: 1
      maximum: 100
      default: 10
    PageSortWithDefaultCreateTimeDescSpec:
      type: array
      items:
        type: string
        minLength: 1
        maxLength: 50
      minLength: 1
      maxLength: 5
      default: 
        - 'createTime,desc'
    PageSortWithDefaultLUTimeDescSpec:
      type: array
      items:
        type: string
        minLength: 1
        maxLength: 50
      minLength: 1
      maxLength: 5
      default: 
        - 'lUTime,desc'
  securitySchemes:
    resourceRepoAuth:
      type: oauth2
      flows:
        password:
          tokenUrl: "http://sundial.benbenedu.cn/account/oauth/token"
          scopes:
            'client:inner': 内网客户端
  parameters:
    pageNumber:
      name: page
      in: query
      description: 指定页码.
      schema:
        $ref: '#/components/schemas/PageNumberSpec'
    pageSize:
      name: size
      in: query
      description: 指定页长.
      schema:
        $ref: '#/components/schemas/PageSizeSpec'
    pageSortWithDefaultCreateTimeDesc:
      name: sort
      in: query
      description: '排序规则. Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
      schema:
        $ref: '#/components/schemas/PageSortWithDefaultCreateTimeDescSpec'
      style: form
      explode: true
    pageSortWithDefaultLUTimeDesc:
      name: sort
      in: query
      description: '排序规则. Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
      schema:
        $ref: '#/components/schemas/PageSortWithDefaultLUTimeDescSpec'
      style: form
      explode: true
