openapi: 3.0.0
info:
  version: 'genesis'
  title: 'Question Service API'
  description: 'Assessment-Cloud:Question-Service对应的API.'
  contact:
    email: gongguochuanqi@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: http://sundial.benbenedu.cn/question/genesis
tags:
  - name: QTag
    description: 访问题目标签.
  - name: Question
    description: 访问题目.
paths:
  /qtags:
    post:
      tags: 
        - QTag
      summary: 创建题目标签.
      description: 创建题目标签.
      operationId: createQTag
      requestBody:
        description: 请求创建的题目标签信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QTagCreatingReq'
      responses:
        '201':
          description: 成功创建题目标签.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QTagCreatedResp'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateTitle:
                  value:
                    code: 'DuplicateTitle'
                    detail: '${detail}'
      security:
        - questionRepoAuth: 
          - client:inner
  /qtags/query:
    post:
      tags: 
        - QTag
      summary: Query题目标签.
      description: Query题目标签.
      operationId: queryQTags
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageSortWithDefaultCreateTimeDesc'
      requestBody:
        description: 查询描述.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QTagQuery'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QTagPage'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
      security:
        - questionRepoAuth: 
          - client:inner
  /qtags/{qtag-id}:
    get:
      tags: 
        - QTag
      summary: 获取指定的题目标签详情.
      description: 获取指定的题目标签详情.
      operationId: getQTagById
      parameters: 
        - name: qtag-id
          in: path
          description: 指定qtag的ID
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QTag'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的题目标签不存在.
      security:
        - questionRepoAuth: 
          - client:inner
  /questions:
    post:
      tags:
        - Question
      summary: 创建题目.
      description: 创建题目.
      operationId: createQuestion
      requestBody:
        description: 请求创建的题目设计信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionDesign'
      responses:
        '201':
          description: 成功创建题目.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionCreatedResp'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateTitle:
                  value:
                    code: 'DuplicateTitle'
                    detail: '${detail}'
      security:
        - questionRepoAuth: 
          - client:inner
  /questions/query:
    post:
      tags: 
        - Question
      summary: Query题目.
      description: Query题目.
      operationId: queryQuestions
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageSortWithDefaultLUTimeDesc'
      requestBody:
        description: 查询描述.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionQuery'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionPage'
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
      security:
        - questionRepoAuth: 
          - client:inner
  /questions/{question-id}:
    get:
      tags: 
        - Question
      summary: 获取指定的题目详情.
      description: 获取指定的题目详情.
      operationId: getQuestionById
      parameters: 
        - name: question-id
          in: path
          description: 指定题目的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      responses:
        '200':
          description: 获取成功.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的题目不存在.
      security:
        - questionRepoAuth: 
          - client:inner
    put:
      tags:
        - Question
      summary: 更新指定题目的设计.
      description: 更新指定题目的设计.
      operationId: updateQuestionById
      parameters: 
        - name: question-id
          in: path
          description: 指定题目的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      requestBody:
        description: 请求更新的题目设计信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdatingReq'
      responses:
        '204':
          description: 更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的题目不存在.
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateTitle:
                  value:
                    code: 'DuplicateTitle'
                    detail: '${detail}'
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                alteringNotAllowed:
                  value:
                    code: 'AlteringNotAllowed'
                    detail: '${detail}'
                  description: '更改仅在Developing状态下被允许.'
      security:
        - questionRepoAuth: 
          - client:inner
  /questions/{question-id}/state:
    put:
      tags: 
        - Question
      summary: 更新指定题目的状态.
      description: 更新指定题目的状态.
      operationId: updateQuestionStateById
      parameters: 
        - name: question-id
          in: path
          description: 指定题目的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      requestBody:
        description: 题目状态更新请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionStateUpdatingReq'
      responses:
        '204':
          description: 题目状态更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的题目不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
                specifiedStateConversionNotAllowed:
                  value:
                    code: 'SpecifiedStateConversionNotAllowed'
                    detail: '${detail}'
                  description: '允许的状态转换路径: Developing->Usable->Discarded'
      security:
        - questionRepoAuth: 
          - client:inner
  /questions/{question-id}/tags:
    put:
      tags: 
        - Question
      summary: 更新指定题目的标签集.
      description: 更新指定题目的标签集.
      operationId: updateQuestionTagsById
      parameters: 
        - name: question-id
          in: path
          description: 指定题目的ID.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
      requestBody:
        description: 题目标签集更新请求信息.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionTagsUpdatingReq'
      responses:
        '204':
          description: 题目标签集更新成功.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: 指定的题目不存在.
        '428':
          description: Precondition Required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                lUTimeConflict:
                  value:
                    code: 'LUTimeConflict'
                    detail: '${detail}'
      security:
        - questionRepoAuth: 
          - client:inner
components:
  schemas:
    QTagCreatingReq:
      type: object
      description: 创建题目标签的请求信息.
      properties:
        title:
          $ref: '#/components/schemas/QTagTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
      required: 
        - title
    QTagCreatedResp:
      type: object
      description: 题目标签创建成功时的响应.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
      required: 
        - id
    QTagQuery:
      type: object
      description: 题目标签查询描述对象.
      properties:
        id: 
          $ref: '#/components/schemas/IdQueryField'
        createTime:
          $ref: '#/components/schemas/TimeQueryField'
        author:
          $ref: '#/components/schemas/IdQueryField'
        title:
          $ref: '#/components/schemas/TextSearchSpec'
        description:
          $ref: '#/components/schemas/TextSearchSpec'
    QTagPage:
      description: 题目标签分页.
      allOf:
        - $ref: '#/components/schemas/BasicPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/QTag'
    QTag:
      type: object
      description: 题目标签.用于题目管理.
      properties:
        id: 
          $ref: '#/components/schemas/ObjectID'
        createTime:
          type: integer
          format: int64
          description: 创建时间(timestamp).
        author:
          $ref: '#/components/schemas/AuthorBrief'
        title:
          $ref: '#/components/schemas/QTagTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
      required: 
        - id
        - createTime
        - author
        - title
    QuestionDesign:
      type: object
      description: 题目的设计信息.
      properties:
        title:
          $ref: '#/components/schemas/QuestionTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
        compositeQunit:
          $ref: '#/components/schemas/CompositeQuestionUnit'
        difficulty:
          $ref: '#/components/schemas/QuestionDifficulty'
      required: 
        - title
        - compositeQunit
    QuestionCreatedResp:
      type: object
      description: 题目创建成功时的响应.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
      required: 
        - id
    QuestionQuery:
      type: object
      description: 题目查询描述对象.
      properties:
        id: 
          $ref: '#/components/schemas/IdQueryField'
        createTime:
          $ref: '#/components/schemas/TimeQueryField'
        lUTime:
          $ref: '#/components/schemas/TimeQueryField'
        author:
          $ref: '#/components/schemas/IdQueryField'
        state:
          type: array
          items:
            $ref: '#/components/schemas/QuestionState'
          description: 指定state所属的集合. =relation=>in.
          minLength: 1
          maxLength: 10
        title:
          $ref: '#/components/schemas/TextSearchSpec'
        description:
          $ref: '#/components/schemas/TextSearchSpec'
        form:
          type: array
          items:
            $ref: '#/components/schemas/QuForm'
          description: 指定form所属的集合. =relation=>in.
          minLength: 1
          maxLength: 10
        stem:
          $ref: '#/components/schemas/TextSearchSpec'
        difficulty:
          type: array
          items:
            $ref: '#/components/schemas/QuestionDifficulty'
          description: 指定difficulty所属的区间序列. =relation=>in. 数组长度必须为偶数.
          minLength: 2
          maxLength: 20
        tags:
          $ref: '#/components/schemas/IdQueryField'
    QuestionPage:
      description: 题目分页.
      allOf:
        - $ref: '#/components/schemas/BasicPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Question'
    QuestionUpdatingReq:
      type: object
      description: 更新题目的请求信息.
      properties:
        questionLUTime: 
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        newDesign:
          $ref: '#/components/schemas/QuestionDesign'
      required: 
        - questionLUTime
        - newDesign
    QuestionStateUpdatingReq:
      type: object
      description: 更新题目状态的请求信息.
      properties:
        questionLUTime:
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        newState:
          $ref: '#/components/schemas/QuestionState'
      required: 
        - questionLUTime
        - newState
    QuestionTagsUpdatingReq:
      type: object
      description: 更新题目标签集的请求信息.
      properties:
        questionLUTime:
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        newTags:
          type: array
          description: 新的标签集. 该数组长度为0时表示清除所有标签.
          items:
            $ref: '#/components/schemas/ObjectID'
          minLength: 0
          maxLength: 50
      required: 
        - questionLUTime
        - newTags
    Question:
      type: object
      description: 题目.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        createTime:
          type: integer
          format: int64
          description: 创建时间(timestamp).
        lUTime:
          type: integer
          format: int64
          description: 最近一次更新时间(timestamp).
        author:
          $ref: '#/components/schemas/AuthorBrief'
        state:
          $ref: '#/components/schemas/QuestionState'
        title:
          $ref: '#/components/schemas/QuestionTitle'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
        compositeQunit:
          $ref: '#/components/schemas/CompositeQuestionUnit'
        difficulty:
          $ref: '#/components/schemas/QuestionDifficulty'
        tags:
          type: array
          description: 标签集.用于管理.
          items:
            $ref: '#/components/schemas/QTagBrief'
      required: 
        - id
        - createTime
        - lUTime
        - author
        - state
        - title
        - compositeQunit
    QuestionState:
      type: string
      description: 题目状态.
      enum: 
        - Developing
        - Usable
        - Discarded
      minLength: 1
      maxLength: 50
    QuestionTitle:
      type: string
      description: 题目标题.
      minLength: 1
      maxLength: 200
    QuestionDifficulty:
      type: number
      format: float
      description: 题目的难度系数.
    CompositeQuestionUnit:
      type: object
      description: 可复合的题目单位.
      properties:
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
        form:
          $ref: '#/components/schemas/QuForm'
        stem:
          $ref: '#/components/schemas/RichTextContentField'
        options:
          type: array
          description: 可选项集.仅当形式为选择题时出现.
          items:
            $ref: '#/components/schemas/QuOption'
          minLength: 1
          maxLength: 20
        answerMatchStrategy:
          $ref: '#/components/schemas/AnswerMatchStrategy'
        stdAnswers:
          type: array
          description: 标准答案集.
          items:
            $ref: '#/components/schemas/StdAnswer'
          minLength: 1
          maxLength: 20
        subQunits:
          type: array
          description: 下属的题目单位集.
          items:
            $ref: '#/components/schemas/CompositeQuestionUnit'
          minLength: 1
          maxLength: 20
        extFeatures:
          type: object
          description: 扩展的特征集,有业务含义.
          additionalProperties:
            $ref: '#/components/schemas/MediumValue'
          minLength: 1
          maxLength: 20
        resources:
          type: array
          description: 当前层面用到的资源集.
          items:
            $ref: '#/components/schemas/ResourceBrief'
          minLength: 1
          maxLength: 50
      required: 
        - form
    QuForm:
      type: string
      description: 题目单位的形式.
      enum: 
        - Choice
        - MChoice
        - FillIn
        - QA
        - Composite
      minLength: 1
      maxLength: 50
    QuOption:
      type: object
      description: 可选项.
      properties:
        number:
          $ref: '#/components/schemas/NumberField'
        content:
          $ref: '#/components/schemas/RichTextContentField'
      required: 
        - number
        - content
    AnswerMatchStrategy:
      type: object
      description: 答案匹配策略.
      properties:
        type:
          type: string
          description: 策略类型.
          enum: 
            - OrderSensitiveEqual
            - OrderInsensitiveEqual
          minLength: 1
          maxLength: 50
        metadata:
          type: object
          description: 策略元数据.用于定义辅助的策略参数.
          additionalProperties:
            type: string
            minLength: 1
            maxLength: 500
          minLength: 1
          maxLength: 50
      required: 
        - type
    StdAnswer:
      type: object
      description: 标准答案.
      properties:
        number:
          $ref: '#/components/schemas/NumberField'
        description:
          $ref: '#/components/schemas/MgmtDescriptionField'
        choices:
          type: array
          description: 选择集.用于支持类选择题形式.
          items:
            $ref: '#/components/schemas/NumberField'
          minLength: 1
          maxLength: 20
        criteria:
          type: array
          description: 非选项形式的答案内容集.用于支持非选择题形式.
          items:
            $ref: '#/components/schemas/MediumValue'
          minLength: 1
          maxLength: 20
      required: 
        - number
    QTagBrief:
      type: object
      description: 题目标签的简单形式.
      properties:
        id: 
          $ref: '#/components/schemas/ObjectID'
        title:
          $ref: '#/components/schemas/QTagTitle'
      required: 
        - id
        - title
    QTagTitle:
      type: string
      description: 不可重复.
      minLength: 1
      maxLength: 25
    IdQueryField:
      type: array
      items:
        $ref: '#/components/schemas/ObjectID'
      description: 指定id所属的集合. =relation=>in.
      minLength: 1
      maxLength: 50
    TimeQueryField:
      type: array
      items:
        type: integer
        format: int64
      description: 指定时间所属的区间序列. =relation=>in. 数组长度必须为偶数.
      minLength: 2
      maxLength: 20
    TextSearchSpec:
      type: object
      description: 文本搜索描述对象.
      properties:
        include:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 25
          description: =relation=>all.
          minLength: 1
          maxLength: 10
        exclude:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 25
          description: =relation=>all.
          minLength: 1
          maxLength: 10
    AuthorBrief:
      type: object
      description: 作者的简单信息.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
        nickname:
          type: string
      required: 
        - id
    ResourceBrief:
      type: object
      description: 资源的简单形式.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        mediaType:
          $ref: '#/components/schemas/MediaTypeField'
        contentNumber:
          $ref: '#/components/schemas/NumberField'
        contentUrl:
          type: string
          description: 资源内容的实际访问地址.
          minLength: 1
          maxLength: 250
      required: 
        - id
        - mediaType
        - contentNumber
        - contentUrl
    RichTextContentField:
      type: string
      description: 富文本编辑器输出的内容.
      minLength: 1
      maxLength: 2000
    NumberField:
      type: integer
      format: int32
      description: 编号.编号越小,优先级越高.
      minimum: 0
    MediumValue:
      type: object
      description: '多媒体形式的值.表现为两种形式: a.资源型,此时有效字段为resourceId和mediaType, b.直接文本型,此时有效字段为mediaType和value.'
      properties:
        resourceId:
          $ref: '#/components/schemas/ObjectID'
        mediaType:
          $ref: '#/components/schemas/MediaTypeField'
        value:
          type: string
          description: 值.
          minLength: 1
          maxLength: 1000
      required:
        - mediaType
      example: 
        mediaType: "text/plain"
        value: "tabu"
    MgmtDescriptionField:
      type: string
      description: 用于管理的描述信息.
      minLength: 1
      maxLength: 250
    MediaTypeField:
      type: string
      externalDocs: 
        description: wiki
        url: https://en.wikipedia.org/wiki/Media_type
      description: mime.types
      minLength: 1
      maxLength: 100
    ObjectID:
      type: string
      description: MongoDB:ObjectId
      minLength: 24
      maxLength: 24
    BasicPage:
      type: object
      description: 分页基本信息.
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
      required: 
        - totalPages
        - totalElements
    ErrorResponse:
      description: 错误响应.
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ErrorResponseCode'
        detail:
          type: string
          description: 错误详情.
      required:
        - code
    ErrorResponseCode:
      type: string
      description: 错误码.
      enum: 
        - Undefined
        - LUTimeConflict
        - AlteringNotAllowed
        - SpecifiedStateConversionNotAllowed
        - DuplicateTitle
  securitySchemes:
    questionRepoAuth:
      type: oauth2
      flows:
        password:
          tokenUrl: "http://sundial.benbenedu.cn/account/oauth/token"
          scopes:
            'client:inner': 内网客户端
  parameters:
    pageNumber:
      name: page
      in: query
      description: 指定页码.
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        default: 0
    pageSize:
      name: size
      in: query
      description: 指定页长.
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
    pageSortWithDefaultCreateTimeDesc:
      name: sort
      in: query
      description: '排序规则. Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
      schema:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 50
        default: 
          - 'createTime,desc'
        minLength: 1
        maxLength: 5
      style: form
      explode: true
    pageSortWithDefaultLUTimeDesc:
      name: sort
      in: query
      description: '排序规则. Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
      schema:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 50
        default: 
          - 'lUTime,desc'
        minLength: 1
        maxLength: 5
      style: form
      explode: true
